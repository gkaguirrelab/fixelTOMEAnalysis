#!/usr/bin/python3.7

import os
import json
from create_fod_image import create_fod_image

# Print the system specs in the log file
os.system('cat /proc/cpuinfo')

# Set initial Flywheel paths
flywheel_base ='/flywheel/v0/'
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
first_output_dir = '/firstOutput' # Working in the flywheel output folder might cause issues so creating a first level output folder 
os.system('mkdir %s'%first_output_dir)
final_output_dir = os.path.join(flywheel_base, 'output')
matlab_func_path = '/tmp/adaptConOPt/run_fodMakerWrapper.sh'

# Set paths to the tools 
mrtrix_path = 'HERE MRTRIX PATH' #path to mrtrix bin

###################Parse Config Here###########################################

with open(config_path) as config_file:
    job_config = json.load(config_file)

method = job_config['method']
BValLowTHD = job_config['convexOpt.BValLowTHD']
BValHighTHD = job_config['convexOpt.BValHighTHD']
SPHMaxOrder = job_config['convexOpt.SPHMaxOrder']
MinNumConstraint = job_config['convexOpt.MinNumConstraint']
NumOptiSteps = job_config['convexOpt.NumOptiSteps']
init_xi = job_config['convexOpt.init_xi']
xi_stepsize = job_config['convexOpt.xi_stepsize']
xi_NumSteps = job_config['convexOpt.xi_NumSteps']
MaxNumFiberCrossingPerVoxel = job_config['convexOpt.MaxNumFiberCrossingPerVoxel']
UniformityFlag = job_config['convexOpt.UniformityFlag']
NoiseFloor = job_config['convexOpt.NoiseFloor']
SPH_Coef_Nifti = job_config['convexOpt.SPH_Coef_Nifti']
lmax = job_config['mrTrix.lmax']

################### Input Files ###############################################
# Get response functions here if passed else ‘’
response_wm
response_wm
response_csf

# Disect HCP here
dwi_image
mask_image
bvecs
bvals
subject_id
#################### Process #################################################

if method == 'MRtrix sphericalDeconvolution':
    create_fod_image(dwi_image, mask_image, bvecs, bvals, response_wm, response_gm, response_csf, lmax, mrtrix_path, subject_id, first_output_dir, final_output_dir)
elif method == 'Adaptive Convex Optimization (Tran & Shi, 2015)':
        
else:
    print('Method unrecognized')

# Run the template function
template_path = os.path.join(final_output_dir, 'FODtemplate.mif')
create_fod_population_template(fod_list, mask_list, mrtrix_path, first_output_dir, voxel_size, template_path)