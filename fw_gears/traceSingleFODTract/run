#!/anaconda3/bin/python3

import os
import json
from roi_tractography import roi_tractography

# Set initial Flywheel paths
flywheel_base ='/flywheel/v0/'
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
first_output_dir = '/firstOutput' # Working in the flywheel output folder might cause issues so creating a first level output folder 
os.system('mkdir %s'%first_output_dir)
final_output_dir = os.path.join(flywheel_base, 'output')

# Set paths to the tools 
trekker_bin = '/trekker/build/Linux/' #path to trekker
freesurfer_environment_path = 'export FREESURFER_HOME=/freesurfer;export SUBJECTS_DIR=/freesurfer/subjects/; export PATH="$FREESURFER_HOME/bin:$PATH"; export PATH="$SUBJECTS_DIR:$PATH"'

###################Parse Config Here###########################################

with open(config_path) as config_file:
    job_config = json.load(config_file)

config = job_config['config']

directionality = config['directionality']
timeLimit = config['timeLimit']
minLength = config['minLength']
maxLength = config['maxLength']
minFODamp = config['minFODamp']
seed_count = config['seed_count']
atMaxLength = config['atMaxLength']
minRadiusOfCurvature = config['minRadiusOfCurvature']
probeCount = config['probeCount']
outputFileName = config['outputFileName']
extractSeedLabel = config['extractSeedLabel']
extractROILabel = config['extractROILabel']
dilateSeedMask = config['dilateSeedMask']
dilateROIMask = config['dilateROIMask']

################### Input Files ###############################################

# paths to inputs
FOD_image_path = os.path.join(flywheel_base, 'input/FOD_image')
seed_image_path = os.path.join(flywheel_base, 'input/seed_image')
ROI_mask_path = os.path.join(flywheel_base, 'input/ROI_mask')

# Get input files 
FOD_image_initial = os.path.join(FOD_image_path, os.listdir(FOD_image_path)[0])
seed_image_initial = os.path.join(seed_image_path, os.listdir(seed_image_path)[0])
ROI_mask_initial = os.path.join(ROI_mask_path, os.listdir(ROI_mask_path)[0])

# Move images to first output 
FOD_image = os.path.join(first_output_dir, 'fod_image.nii.gz')
seed_image = os.path.join(first_output_dir, 'seed_image.nii.gz')
ROI_mask = os.path.join(first_output_dir, 'roi_image.nii.gz')

os.system('cp %s %s' % (FOD_image_initial, FOD_image))
os.system('cp %s %s' % (seed_image_initial, seed_image))
os.system('cp %s %s' % (ROI_mask_initial, ROI_mask))

# Dilate masks if requested
if not dilateSeedMask == "0":
    os.system('%s; /freesurfer/bin/mri_binarize --i %s --min 1 --dilate %s --o %s' % (freesurfer_environment_path, seed_image, dilateSeedMask, seed_image))
if not dilateROIMask == "0":
    os.system('%s; /freesurfer/bin/mri_binarize --i %s --min 1 --dilate %s --o %s' % (freesurfer_environment_path, ROI_mask, dilateROIMask, ROI_mask))

# Extract labels if requested
if not extractSeedLabel == 'NA': 
    os.system('%s; /freesurfer/bin/mri_extract_label %s %s %s' % (freesurfer_environment_path, seed_image, extractSeedLabel, seed_image))
if not extractSeedLabel == 'NA': 
    os.system('%s; /freesurfer/bin/mri_extract_label %s %s %s' % (freesurfer_environment_path, ROI_mask, extractROILabel, ROI_mask))

#################### Process #################################################
final_steamline_file_path = os.path.join(final_output_dir, outputFileName + '.vtk') 
final_plot_path = os.path.join(final_output_dir, outputFileName + '.png') 
roi_tractography(FOD_image, seed_image, ROI_mask, final_steamline_file_path, final_plot_path, trekker_bin, 
                  directionality, timeLimit, minLength, maxLength, minFODamp, 
                  seed_count, atMaxLength, minRadiusOfCurvature, probeCount)
