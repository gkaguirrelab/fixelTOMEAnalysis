#!/usr/bin/python3.7

import os
import json
from create_fod_image import create_fod_image

# Print the system specs in the log file
os.system('cat /proc/cpuinfo')

# Set initial Flywheel paths
flywheel_base ='/flywheel/v0/'
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
first_output_dir = '/firstOutput' # Working in the flywheel output folder might cause issues so creating a first level output folder 
os.system('mkdir %s'%first_output_dir)
final_output_dir = os.path.join(flywheel_base, 'output')
matlab_func_path = '/tmp/adaptConOPt/run_fodMakerWrapper.sh'
constraintFile = os.path.join(flywheel_base, 'ConstraintSet.mat')
sphereParam = os.path.join(flywheel_base, 'sphere5120.obj')

# Set paths to the tools 
mrtrix_path = 'HERE MRTRIX PATH' #path to mrtrix bin
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v98'
fsl_path = 'FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/'

###################Parse Config Here###########################################

with open(config_path) as config_file:
    job_config = json.load(config_file)

method = job_config['method']
BValLowTHD = job_config['convexOpt.BValLowTHD']
BValHighTHD = job_config['convexOpt.BValHighTHD']
SPHMaxOrder = job_config['convexOpt.SPHMaxOrder']
MinNumConstraint = job_config['convexOpt.MinNumConstraint']
NumOptiSteps = job_config['convexOpt.NumOptiSteps']
init_xi = job_config['convexOpt.init_xi']
xi_stepsize = job_config['convexOpt.xi_stepsize']
xi_NumSteps = job_config['convexOpt.xi_NumSteps']
MaxNumFiberCrossingPerVoxel = job_config['convexOpt.MaxNumFiberCrossingPerVoxel']
UniformityFlag = job_config['convexOpt.UniformityFlag']
NoiseFloor = job_config['convexOpt.NoiseFloor']
SPH_Coef_Nifti = job_config['convexOpt.SPH_Coef_Nifti']
lmax = job_config['mrTrix.lmax']

################### Input Files ###############################################

# paths to inputs
hcp_diff_archive_path = os.path.join(flywheel_base, 'input/hcp_diff_archive')
response_wm_path = os.path.join(flywheel_base, 'input/response_wm')
response_gm_path = os.path.join(flywheel_base, 'input/response_gm')
response_csf_path = os.path.join(flywheel_base, 'input/response_csf')

# Get input files 
hcp_diff_archive = os.path.join(hcp_diff_archive_path, os.listdir(hcp_diff_archive_path)[0])
response_wm = os.path.join(response_wm_path, os.listdir(response_wm_path)[0])
response_gm = os.path.join(response_gm_path, os.listdir(response_gm_path)[0])
response_csf = os.path.join(response_csf_path, os.listdir(response_csf_path)[0])

# Unzip HCP-diff
scratch = '/hcp_directory'
os.system('mkdir %s' % scratch)
os.system('unzip %s -d %s' % (hcp_diff_archive, scratch))

subject_id = os.listdir(scratch)[0]
dwi_image = os.path.join(scratch, subject_id, 'All_DTI_acqs', 'data', 'data.nii.gz')
mask_image = os.path.join(scratch, subject_id, 'All_DTI_acqs', 'data', 'nodif_brain_mask.nii.gz')
bvecs = os.path.join(scratch, subject_id, 'All_DTI_acqs', 'data', 'bvecs')
bvals = os.path.join(scratch, subject_id, 'All_DTI_acqs', 'data', 'bvals')

#################### Process #################################################
fod_workdir = os.path.join(first_output_dir, 'fod_workdir')

if method == 'MRtrix sphericalDeconvolution':
    create_fod_image(dwi_image, mask_image, bvecs, bvals, response_wm, response_gm, response_csf, lmax, mrtrix_path, subject_id, fod_workdir, final_output_dir)
    new_mask_name = 'mask_%s' % subject_id
elif method == 'Adaptive Convex Optimization (Tran & Shi, 2015)':
    cmd = '%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s' % (matlab_func_path, mcr_path, constraintFile, sphereParam, 
                                                                                    fsl_path, fod_workdir, final_output_dir, subject_id, dwi_image,
                                                                                    mask_image, bvals, bvecs, BValLowTHD, BValHighTHD,
                                                                                    SPHMaxOrder, MinNumConstraint, NumOptiSteps,
                                                                                    init_xi, xi_stepsize, xi_NumSteps, MaxNumFiberCrossingPerVoxel,
                                                                                    UniformityFlag, NoiseFloor)
    os.system(cmd)
else:
    print('Method unrecognized')

# Move the mask to the output folder as well
os.system('cp %s %s' % (mask_image, os.path.join(final_output_dir, 'mask_' + subject_id + 'nii.gz')))