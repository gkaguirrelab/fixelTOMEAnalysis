#!/anaconda3/bin/python3

import os
import json
from extract_fixel_values import extract_fixel_values

# Print the system specs in the log file
os.system('cat /proc/cpuinfo')

# Set initial Flywheel paths
flywheel_base ='/flywheel/v0/'
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
first_output_dir = '/firstOutput' # Working in the flywheel output folder might cause issues so creating a first level output folder 
os.system('mkdir %s'%first_output_dir)
final_output_dir = os.path.join(flywheel_base, 'output')

# Set paths to the tools 
mrtrix_path = '/mrtrix3/bin/' #path to mrtrix bin

###################Parse Config Here###########################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

smooth_fixels = config['smooth_fixels']
track_density_thresh = config['track_density_thresh']

################### Input Files ###############################################

# Get the other input 
left_roi_path = os.path.join(flywheel_base, 'input', 'leftROI')
if os.path.exists(left_roi_path):
    left_roi = os.path.join(left_roi_path, os.listdir(left_roi_path)[0])
else:
    left_roi = 'NA'
right_roi_path = os.path.join(flywheel_base, 'input', 'rightROI')
if os.path.exists(right_roi_path):
    right_roi = os.path.join(right_roi_path, os.listdir(right_roi_path)[0])
else:
    right_roi = 'NA'
    
# Extract the calculateFixel output 
calculateFixelResults_path = os.path.join(flywheel_base, 'input', 'calculateFixelResults')
calculateFixelResults = os.path.join(calculateFixelResults_path, os.listdir(calculateFixelResults_path)[0])
unzipped_results = '/tmp/unzipped_path'
os.system('mkdir %s' % unzipped_results)
os.system('unzip -q %s -d %s' % (calculateFixelResults, unzipped_results)) 
input_folder = os.path.join(unzipped_results, os.listdir(unzipped_results)[0])

#################### Run Func #################################################
extract_fixel_values(input_folder, mrtrix_path, first_output_dir, left_roi, right_roi, track_density_thresh=track_density_thresh, smooth_fixels=smooth_fixels)
os.system('cd %s; zip -r %s cropped*' % (first_output_dir, os.path.join(final_output_dir, 'results.zip')))
os.system('cd %s; cp fd_stats.csv fc_stats.csv log_fc_stats.csv fdc_stats.csv %s' % (first_output_dir, final_output_dir))
