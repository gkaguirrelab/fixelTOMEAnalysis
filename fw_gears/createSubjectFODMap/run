#!/usr/bin/python3.5

import os
import json
from create_fod_image import create_fod_image

# Print the system specs in the log file
os.system('cat /proc/cpuinfo')

# Set initial Flywheel paths
flywheel_base ='/flywheel/v0/'
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
first_output_dir = '/firstOutput' # Working in the flywheel output folder might cause issues so creating a first level output folder 
os.system('mkdir %s'%first_output_dir)
final_output_dir = os.path.join(flywheel_base, 'output')
matlab_func_path = '/tmp/adaptConOpt/run_fodMakerWrapper.sh'
constraintFile = os.path.join(flywheel_base, 'ConstraintSet.mat')
sphereParam = os.path.join(flywheel_base, 'sphere5120.obj')

# Set paths to the tools 
mrtrix_path = '/mrtrix3/bin/' #path to mrtrix bin
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v98'
fsl_path = 'FSLDIR=/fsl/;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/fsl/bin/'
fsl_bin = '/fsl/bin'

###################Parse Config Here###########################################

with open(config_path) as config_file:
    job_config = json.load(config_file)

config = job_config['config']

method = config['method']
BValLowTHD = config['convexOpt-BValLowTHD']
BValHighTHD = config['convexOpt-BValHighTHD']
SPHMaxOrder = config['convexOpt-SPHMaxOrder']
MinNumConstraint = config['convexOpt-MinNumConstraint']
NumOptiSteps = config['convexOpt-NumOptiSteps']
init_xi = config['convexOpt-init_xi']
xi_stepsize = config['convexOpt-xi_stepsize']
xi_NumSteps = config['convexOpt-xi_NumSteps']
MaxNumFiberCrossingPerVoxel = config['convexOpt-MaxNumFiberCrossingPerVoxel']
UniformityFlag = config['convexOpt-UniformityFlag']
NoiseFloor = config['convexOpt-NoiseFloor']
lmax = config['mrTrix-lmax']

################### Input Files ###############################################

# paths to inputs
hcp_diff_archive_path = os.path.join(flywheel_base, 'input/hcp_diff_archive')
response_wm_path = os.path.join(flywheel_base, 'input/response_wm')
response_gm_path = os.path.join(flywheel_base, 'input/response_gm')
response_csf_path = os.path.join(flywheel_base, 'input/response_csf')

# Get input files 
hcp_diff_archive = os.path.join(hcp_diff_archive_path, os.listdir(hcp_diff_archive_path)[0])
if os.path.exists(response_wm_path):
    response_wm = os.path.join(response_wm_path, os.listdir(response_wm_path)[0])
else:
    response_wm = ''
if os.path.exists(response_gm_path):
    response_gm = os.path.join(response_gm_path, os.listdir(response_gm_path)[0])
else:
    response_gm = ''
if os.path.exists(response_csf_path):
    response_csf = os.path.join(response_csf_path, os.listdir(response_csf_path)[0])
else:
    response_csf = ''

# Unzip HCP-diff
scratch = '/hcp_directory'
os.system('mkdir %s' % scratch)
os.system('unzip %s -d %s' % (hcp_diff_archive, scratch))

subject_id = os.listdir(scratch)[0]
dwi_image = os.path.join(scratch, subject_id, 'All_DTI_acqs', 'data', 'data.nii.gz')
mask_image = os.path.join(scratch, subject_id, 'All_DTI_acqs', 'data', 'nodif_brain_mask.nii.gz')
bvecs = os.path.join(scratch, subject_id, 'All_DTI_acqs', 'data', 'bvecs')
bvals = os.path.join(scratch, subject_id, 'All_DTI_acqs', 'data', 'bvals')

#################### Process #################################################
fod_workdir = os.path.join(first_output_dir, 'fod_workdir')
split_work_dir = os.path.join(first_output_dir, 'split_workdir')

if method == 'MRtrix sphericalDec':
    create_fod_image(dwi_image, mask_image, bvecs, bvals, response_wm, response_gm, response_csf, lmax, mrtrix_path, subject_id, fod_workdir, final_output_dir)
elif method == 'Adaptive Convex Optimization (Tran and Shi, 2015)':
    cmd = """%s %s '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s'""" % (matlab_func_path, mcr_path, constraintFile, sphereParam, 
                                                                                                                             fod_workdir, split_work_dir, subject_id, dwi_image,
                                                                                                                             mask_image, bvals, bvecs, BValLowTHD, BValHighTHD,
                                                                                                                             SPHMaxOrder, MinNumConstraint, NumOptiSteps,
                                                                                                                             init_xi, xi_stepsize, xi_NumSteps, MaxNumFiberCrossingPerVoxel,
                                                                                                                             UniformityFlag, NoiseFloor)
    os.system(cmd)    
    os.system('cp %s/mask* %s' % (split_work_dir, os.path.join(final_output_dir, 'mask_' + subject_id + '.nii.gz')))
    split_fod_dir = os.path.join(split_work_dir, 'splittedFOD')
    split_tissue_dir = os.path.join(split_work_dir, 'splittedTissue')
    os.system('cd %s; %s -z %s *' % (split_fod_dir, os.path.join(fsl_bin, 'fslmerge'), os.path.join(final_output_dir, 'fod_%s.nii.gz' % subject_id)))
    os.system('cd %s; %s -z %s *' % (split_tissue_dir, os.path.join(fsl_bin, 'fslmerge'), os.path.join(final_output_dir, 'tissueMap_%s.nii.gz' % subject_id)))

else:
    print('Method unrecognized')