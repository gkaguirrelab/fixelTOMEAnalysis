#!/usr/bin/python3.5

import os
import json
from create_fod_population_template import create_fod_population_template

# Print the system specs in the log file
os.system('cat /proc/cpuinfo')

# Set initial Flywheel paths
flywheel_base ='/flywheel/v0/'
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
first_output_dir = '/firstOutput' # Working in the flywheel output folder might cause issues so creating a first level output folder 
os.system('mkdir %s'%first_output_dir)
final_output_dir = os.path.join(flywheel_base, 'output')

# Set paths to the tools 
mrtrix_path = '/mrtrix3/bin/' #path to mrtrix bin

###################Parse Config Here###########################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

voxel_size = config['voxelSize']

################### Input Files ###############################################

fod_list = []
mask_list = []

# Find the images and put the paths into fod/mask python lists
for i in range(45):
    image_number = i+1  
    if image_number < 10: 
        image_number_string = '0' + str(image_number)
    else:
        image_number_string = str(image_number)  
   
    image_path_and_name = os.path.join(flywheel_base, 'input', 'fodImage%s' % image_number_string) 
    if os.path.exists(image_path_and_name):
        image = os.path.join(image_path_and_name, os.listdir(image_path_and_name)[0])
        fod_list.append(image)
    mask_path_and_name = os.path.join(flywheel_base, 'input', 'maskImage%s' % image_number_string) 
    if os.path.exists(mask_path_and_name):    
        mask = os.path.join(mask_path_and_name, os.listdir(mask_path_and_name)[0]) 
        mask_list.append(mask)

#################### Process #################################################
print('FOD LIST: %s' % fod_list)
print('Mask LIST: %s' % mask_list)

# If the mask list is empty make masks for each images. 
if len(mask_list) == 0:
    raise RuntimeError('No masks found')
    # maskdir = '/maskdir'
    # os.system('mkdir %s' % maskdir)
    # for image in fod_list:
    #     new_image_name = 'mask_' + os.path.split(image)[1]
    #     mask_path = os.path.join(maskdir, new_image_name)
    #     mask_list.append(mask_path)
    #     os.system('%s %s %s' % (os.path.join(mrtrix_path,'dwi2mask'), image, mask_path))
        
# Run the template function
template_path = os.path.join(final_output_dir, 'FODtemplate.mif')
create_fod_population_template(fod_list, mask_list, mrtrix_path, first_output_dir, voxel_size, template_path)

# Also output a nifti version of the template
template_nifti = os.path.join(final_output_dir, 'FODtemplate.nii.gz')
os.system('%s %s %s' % (os.path.join(mrtrix_path, 'mrconvert'), template_path, template_nifti))
